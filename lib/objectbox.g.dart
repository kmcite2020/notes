// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'notes/notes.dart';
import 'settings/settings.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(2, 8918741187473052306),
      name: 'Note',
      lastPropertyId: const IdUid(6, 5313469767795923325),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6973185690849801237),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6957398539628233659),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 3257803869102539890),
            name: 'details',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5612731448561461733),
            name: 'status',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1881817349978830201),
            name: 'timeCreated',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5313469767795923325),
            name: 'dueDate',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 1947399271417853112),
      name: 'Settings',
      lastPropertyId: const IdUid(3, 6544885990146011985),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 3070317591792003513),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3794186008424949660),
            name: 'themeMode',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6544885990146011985),
            name: 'viewMode',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 1947399271417853112),
      lastIndexId: const IdUid(0, 0),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [6037704390599508473, 7697517241782608662],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        3115364370133413835,
        3016435026793890402,
        6739018433548726871,
        8620683136401287936,
        6559727849877934707,
        8276256562535248268
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Note: EntityDefinition<Note>(
        model: _entities[0],
        toOneRelations: (Note object) => [],
        toManyRelations: (Note object) => {},
        getId: (Note object) => object.id,
        setId: (Note object, int id) {
          object.id = id;
        },
        objectToFB: (Note object, fb.Builder fbb) {
          final titleOffset = fbb.writeString(object.title);
          final detailsOffset = fbb.writeString(object.details);
          final statusOffset = fbb.writeString(object.status);
          fbb.startTable(7);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, titleOffset);
          fbb.addOffset(2, detailsOffset);
          fbb.addOffset(3, statusOffset);
          fbb.addInt64(4, object.timeCreated.millisecondsSinceEpoch);
          fbb.addInt64(5, object.dueDate.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Note()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..title = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..details = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '')
            ..status = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 10, '')
            ..timeCreated = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0))
            ..dueDate = DateTime.fromMillisecondsSinceEpoch(
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0));

          return object;
        }),
    Settings: EntityDefinition<Settings>(
        model: _entities[1],
        toOneRelations: (Settings object) => [],
        toManyRelations: (Settings object) => {},
        getId: (Settings object) => object.id,
        setId: (Settings object, int id) {
          object.id = id;
        },
        objectToFB: (Settings object, fb.Builder fbb) {
          final themeModeOffset = fbb.writeString(object.themeMode);
          final viewModeOffset = fbb.writeString(object.viewMode);
          fbb.startTable(4);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, themeModeOffset);
          fbb.addOffset(2, viewModeOffset);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Settings(
              id: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              themeMode: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              viewMode: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''));

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Note] entity fields to define ObjectBox queries.
class Note_ {
  /// see [Note.id]
  static final id = QueryIntegerProperty<Note>(_entities[0].properties[0]);

  /// see [Note.title]
  static final title = QueryStringProperty<Note>(_entities[0].properties[1]);

  /// see [Note.details]
  static final details = QueryStringProperty<Note>(_entities[0].properties[2]);

  /// see [Note.status]
  static final status = QueryStringProperty<Note>(_entities[0].properties[3]);

  /// see [Note.timeCreated]
  static final timeCreated =
      QueryIntegerProperty<Note>(_entities[0].properties[4]);

  /// see [Note.dueDate]
  static final dueDate = QueryIntegerProperty<Note>(_entities[0].properties[5]);
}

/// [Settings] entity fields to define ObjectBox queries.
class Settings_ {
  /// see [Settings.id]
  static final id = QueryIntegerProperty<Settings>(_entities[1].properties[0]);

  /// see [Settings.themeMode]
  static final themeMode =
      QueryStringProperty<Settings>(_entities[1].properties[1]);

  /// see [Settings.viewMode]
  static final viewMode =
      QueryStringProperty<Settings>(_entities[1].properties[2]);
}
